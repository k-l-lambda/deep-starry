
import numpy as np



def parseColor (int24):
	r = (int24 & 0xff0000) >> 16
	g = (int24 & 0x00ff00) >> 8
	b = int24 & 0xff

	return np.array([[[r, g, b]]], dtype = float)


PALETTE = [
	0xFF0000, 0x03FF4C, 0x9705FF, 0xFFE008, 0x0AD6FF, 0xFF0D90, 0x4BFF0F, 0x1C12FF, 0xFF6314, 0x17FFA8,
	0xEC19FF, 0xCFFF1C, 0x1E8EFF, 0xFF214F, 0x23FF36, 0x7826FF, 0xFFB828, 0x2BFFF7, 0xFF2DCA, 0x8EFF30,
	0x3254FF, 0xFF4F35, 0x37FF8B, 0xC63AFF, 0xFEFF3C, 0x3EC6FF, 0xFF418F, 0x5AFF43, 0x6546FF, 0xFF9D48,
	0x4AFFD3, 0xFF4DF7, 0xC4FF4F, 0x5192FF, 0xFF5461, 0x56FF7A, 0xAC58FF, 0xFFDD5A, 0x5CF1FF, 0xFF5FC2,
	0x95FF61, 0x6369FF, 0xFF8C65, 0x67FFBA, 0xE769FF, 0xECFF6C, 0x6EC2FF, 0xFF7099, 0x72FF73, 0x9D74FF,
	0xFFC776, 0x78FFEF, 0xFF7AE8, 0xC2FF7C, 0x7E9DFF, 0xFF8680, 0x82FFAC, 0xD283FF, 0xFFF685, 0x87E5FF,
	0xFF89C3, 0xA2FF8B, 0x978DFF, 0xFFB98E, 0x90FFDB, 0xFB92FF, 0xE3FF93, 0x95C5FF, 0xFF97A7, 0x98FFA6,
	0xC59AFF, 0xFFE39C, 0x9DFEFF, 0xFF9FE2, 0xC7FFA0, 0xA2ADFF, 0xFFB4A3, 0xA5FFCF, 0xEAA6FF, 0xFAFFA8,
	0xA9E2FF, 0xFFABC9, 0xB2FFAC, 0xBFAEFF, 0xFFD8AF, 0xB0FFEF, 0xFFB2F8, 0xE2FFB3, 0xB4CCFF, 0xFFB5B8,
	0xB7FFCA, 0xDFB8FF, 0xFFF4B9, 0xBAF6FF, 0xFFBBE2, 0xCFFFBD, 0xBFBEFF, 0xFFD2BF, 0xC0FFE6, 0xF8C1FF,
	0xF4FFC2, 0xC3E3FF, 0xFFC4D2, 0xC5FFC9, 0xDAC6FF, 0xFFEBC7, 0xC8FFFB, 0xFFC9F3, 0xE4FFCA, 0xCBD5FF,
	0xFFD1CC, 0xCDFFE0, 0xEFCEFF, 0xFFFECF, 0xD0F2FF, 0xFFD1E5, 0xD8FFD1, 0xD8D2FF, 0xFFE6D3, 0xD4FFF3,
]
PALETTE = list(map(parseColor, PALETTE))


def composeChromaticMap (heatmaps):	# heatmaps: (channel, height, width)
	heatmaps = np.clip(heatmaps, 0, 1)
	layers = [np.expand_dims(heatmaps[i], axis = 2) * PALETTE[i] for i in range(heatmaps.shape[0])]

	#return np.uint8(np.clip(np.sum(layers, axis = 0), 0, 255))
	#return np.uint8(np.sum(layers, axis = 0))
	s = np.sum(layers, axis = 0)
	peak = np.max(s)
	return np.uint8(s * 255. / max(peak, 1e-7))
